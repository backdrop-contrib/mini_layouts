<?php
/**
 * @file
 * Provides the ability to create mini layouts blocks.
 */

/**
 * Implements hook_permission().
 */
function mini_layouts_permission() {
  $permissions['administer blocks'] = array(
    'title' => t('Administer mini layouts blocks'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function mini_layouts_menu() {
  $items['admin/structure/mini-layouts'] = array(
    'title' => 'Mini layouts',
    'description' => 'Create reusable blocks that can be placed in layouts.',
    'page callback' => 'mini_layouts_admin_list',
    'access arguments' => array('administer blocks'),
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/list'] = array(
    'title' => 'List mini layouts',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/mini-layouts/manage/%'] = array(
    'title' => 'Configure layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_admin_configure', 4),
    'access arguments' => array('administer blocks'),
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/manage/%/configure'] = array(
    'title' => 'Configure mini layout',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/mini-layouts/manage/%/delete'] = array(
    'title' => 'Delete mini layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_block_delete', 4),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/manage/%/configure-layout-blocks'] = array(
    'title' => 'Manage blocks',
    'page callback' => 'mini_layouts_edit_content',
    'page arguments' => array(4),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/add'] = array(
    'title' => 'Add mini layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_add_block_form'),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mini_layouts.admin.inc',
  );
  $base = array(
    'access arguments' => array('administer layouts'),
    'theme callback' => 'ajax_base_page_theme',
  );
  $items['admin/structure/mini-layouts/manage/%layout_tempstore/context/add'] = array(
    'title' => 'Add context',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_context_add_form', 4),
    'type' => MENU_CALLBACK,
    'file' => 'mini_layouts.context.admin.inc',
  ) + $base;

  $items['admin/structure/mini-layouts/manage/%layout_tempstore/relationship/add'] = array(
    'title' => 'Add relationship',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_context_relationship_add_form', 4),
    'type' => MENU_CALLBACK,
    'file' => 'mini_layouts.context.admin.inc',
  ) + $base;

  $items['admin/structure/mini-layouts/manage/%layout_tempstore/context/edit/layout/%'] = array(
    'title' => 'Configure context',
    'load arguments' => array(4),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_context_add_form', 4, 8),
    'type' => MENU_CALLBACK,
    'file' => 'mini_layouts.context.admin.inc',
  ) + $base;

  $items['admin/structure/mini-layouts/manage/%layout_tempstore/relationship/edit/layout/%'] = array(
    'title' => 'Configure relationship',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_context_relationship_add_form', 4, 8),
    'type' => MENU_CALLBACK,
    'file' => 'mini_layouts.context.admin.inc',
  ) + $base;
  return $items;
}

function mini_layouts_load($name, $set_tempstore = FALSE) {
  $mini_layouts = &backdrop_static(__FUNCTION__, array());
  if (isset($mini_layouts[$name]) && !$set_tempstore) {
    return $mini_layouts[$name];
  }

  $configs = layout_get_all_configs('mini_layouts');
  if (isset($configs[$name])) {
    $layout = new MiniLayout($configs[$name]);
    $mini_layouts[$name] = $layout;
    layout_set_layout_tempstore($mini_layouts[$name]);
    return $mini_layouts[$name];
  }
  return NULL;
}

/**
 * Implements hook_config_info().
 */
function mini_layouts_config_info() {
  $prefixes['layout.mini_layouts'] = array(
    'name_key' => 'name',
    'label_key' => 'info',
    'group' => t('Mini layouts blocks'),
  );
  return $prefixes;
}

/**
 * Implements hook_block_info().
 */
function mini_layouts_block_info() {
  global $language;

  // Statically cache to prevent multiple database lookups.
  $blocks = &backdrop_static(__FUNCTION__);
  if (isset($blocks)) {
    return $blocks;
  }

  $blocks = array();
  $config_names = layout_get_all_configs('mini_layouts');

  foreach ($config_names as $block) {
    // $block = config_get($config_name);
    $block_info = array();
    $block_info['info'] = $block['info'];
    $block_info['description'] = !empty($block['description']) ? $block['description'] : NULL;

    // If no description was entered, use a generic one.
    if (empty($block_info['description'])) {
      $block_info['description'] = t('A reusable mini layouts block.');
    }
    $blocks[$block['name']] = $block_info;
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generates the administrator-defined blocks for display.
 */
function mini_layouts_block_view($name = '') {
  $layout = mini_layouts_load($name);
  if (!$layout) {
    return array();
  }

  static $rendering = array();

  // Prevent loops if someone foolishly puts the block inside itself:
  if (!empty($rendering[$name])) {
    return array();
  }

  $rendering[$name] = TRUE;

  $renderer = layout_create_renderer('mini_layouts_renderer', $layout);

  $data['subject'] = strlen($layout->title) ? check_plain($layout->title) : NULL;
  $data['content'] = array(
    '#markup' => $renderer->render(),
    '#weight' => 0,
    '#contextual_links' => array(
      'mini_layouts' => array('admin/structure/mini-layouts/manage', array($name)),
    ),
  );

  return $data;
}


/**
 * Pass through to the layouts content editor.
 */
function mini_layouts_edit_content($name) {
  // Load from database to tempstore as Layout pulls from tempstore to build
  // the content form and blocks etc.
  if (!$layout = layout_tempstore_load($name)) {
    $layout = mini_layouts_load($name, TRUE);

    // Don't use layout_set_layout_tempstore(). It locks the layout.
    tempstore_set('layout.layout', $layout->name, $layout, 604800);
    $layout->locked = FALSE;
  }

  $layout->setPath('mini_layouts_block/' . $name);
  module_load_include('inc', 'layout', 'layout.admin');
  return backdrop_get_form('layout_content_form', $layout);
}

function mini_layouts_form_layout_content_form_alter(&$form, &$form_state, $form_id) {
  form_load_include($form_state, 'inc', 'layout', 'layout.admin');
  if ($form['#layout']->module == 'mini_layouts') {
    $form['actions']['submit']['#submit'] = array('mini_layouts_layout_content_form_submit');
    $form['actions']['cancel']['#submit'] = array('mini_layouts_layout_settings_form_reset');
  }
}

/**
 * Submit handler for layout_settings_form() that resets in-progress changes.
 */
function mini_layouts_layout_settings_form_reset($form, &$form_state) {
  /* @var Layout $layout */
  $layout = $form_state['layout'];
  layout_clear_layout_tempstore($layout->name);
  backdrop_set_message(t('Layout changes discarded.'));
  $form_state['redirect'] = 'admin/structure/mini-layouts';
}

function mini_layouts_layout_content_form_submit(&$form, &$form_state) {
  layout_content_form_submit($form, $form_state);
  layout_clear_layout_tempstore($form_state['layout']->name);
  cache()->delete('layout:mini_layouts:config');
  backdrop_static_reset('mini_layouts_block_info');
}

/**
 * Implements hook_layout_renderer_info().
 */
function mini_layouts_layout_renderer_info() {
  $info['mini_layouts_renderer'] = array(
    'class' => 'MiniLayoutsRenderer',
  );

  return $info;
}

/**
 * Implements hook_autoload_info().
 */
function mini_layouts_autoload_info() {
  return array(
    'MiniLayout' => 'layout.mini_layouts.class.inc',
    'MiniLayoutsRenderer' => 'mini_layouts_renderer.inc',
  );
}

function mini_layouts_preprocess_layout(&$variables) {
  // This tricks layout_preprocess_layout() into hiding the page title and tabs.
  if ($variables['layout']->module == 'mini_layouts') {
    $variables['admin'] = TRUE;
  }
}
