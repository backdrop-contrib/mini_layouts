<?php
/**
 * @file
 * Provides the ability to create mini layouts blocks.
 */

/**
 * Implements hook_permission().
 */
function mini_layouts_permission() {
  $permissions['administer blocks'] = array(
    'title' => t('Administer mini layouts blocks'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function mini_layouts_menu() {
  $items['admin/structure/mini-layouts'] = array(
    'title' => 'Mini layouts',
    'description' => 'Create reusable blocks that can be placed in layouts.',
    'page callback' => 'mini_layouts_admin_list',
    'access arguments' => array('administer blocks'),
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/list'] = array(
    'title' => 'List mini layouts',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/mini-layouts/manage/%'] = array(
    'title' => 'Configure layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_admin_configure', 4),
    'access arguments' => array('administer blocks'),
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/manage/%/configure'] = array(
    'title' => 'Configure mini layout',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/mini-layouts/manage/%/delete'] = array(
    'title' => 'Delete mini layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_block_delete', 4),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/manage/%/configure-layout-blocks'] = array(
    'title' => 'Manage blocks',
    'page callback' => 'mini_layouts_edit_content',
    'page arguments' => array(4),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/add'] = array(
    'title' => 'Add mini layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_admin_configure'),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mini_layouts.admin.inc',
  );
  $base = array(
    'access arguments' => array('administer layouts'),
    'theme callback' => 'ajax_base_page_theme',
  );
  $items['admin/structure/mini-layouts/manage/%layout_tempstore/context/add'] = array(
    'title' => 'Add context',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_context_add_form', 4),
    'type' => MENU_CALLBACK,
    'file' => 'mini_layouts.context.admin.inc',
  ) + $base;

  $items['admin/structure/mini-layouts/manage/%layout_tempstore/relationship/add'] = array(
    'title' => 'Add relationship',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_context_relationship_add_form', 4),
    'type' => MENU_CALLBACK,
    'file' => 'mini_layouts.context.admin.inc',
  ) + $base;

  $items['admin/structure/mini-layouts/manage/%layout_tempstore/context/edit/layout/%'] = array(
    'title' => 'Configure context',
    'load arguments' => array(4),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_context_add_form', 4, 8),
    'type' => MENU_CALLBACK,
    'file' => 'mini_layouts.context.admin.inc',
  ) + $base;

  $items['admin/structure/mini-layouts/manage/%layout_tempstore/relationship/edit/layout/%'] = array(
    'title' => 'Configure relationship',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_context_relationship_add_form', 4, 8),
    'type' => MENU_CALLBACK,
    'file' => 'mini_layouts.context.admin.inc',
  ) + $base;
  return $items;
}

/**
 * Implements hook_config_info().
 */
function mini_layouts_config_info() {
  $prefixes['layout.mini_layouts'] = array(
    'name_key' => 'name',
    'label_key' => 'title',
    'group' => t('Mini layouts blocks'),
  );
  return $prefixes;
}

/**
 * Implements hook_block_info().
 */
function mini_layouts_block_info() {
  global $language;

  // Statically cache to prevent multiple database lookups.
  $blocks = &backdrop_static(__FUNCTION__);
  if (isset($blocks)) {
    return $blocks;
  }

  $blocks = array();
  $config_names = layout_get_all_configs('mini_layouts');

  foreach ($config_names as $block) {
    $block_info = array();
    $block_info['info'] = !empty($block['block_title']) ? $block['block_title'] : $block['title'];
    $block_info['description'] = !empty($block['description']) ? $block['description'] : NULL;

    // If no description was entered, use a generic one.
    if (empty($block_info['description'])) {
      $block_info['description'] = t('A reusable mini layouts block.');
    }
    $blocks[$block['name']] = $block_info;
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generates the administrator-defined blocks for display.
 */
function mini_layouts_block_view($name = '', $settings = array(), $contexts = array()) {
  backdrop_add_css(backdrop_get_path('module', 'mini_layouts') . '/css/mini-layouts.css');

  $blocks_info = mini_layouts_block_info();
  if (!in_array($name, array_keys($blocks_info))) {
    return;
  }

  $active_layout = mini_layout_get_layout_by_path();

  if (!empty($active_layout) && $active_layout->name == $name) {
    $layout = $active_layout;
  }
  else {
    $layout = mini_layouts_load($name);
  }
  if (!$layout) {
    return array();
  }

  static $rendering = array();

  // Prevent loops if someone foolishly puts the block inside itself:
  if (!empty($rendering[$name])) {
    return array();
  }

  $rendering[$name] = TRUE;

  $renderer = layout_create_renderer('mini_layouts_renderer', $layout);
  $data['subject'] = strlen($layout->block_title) ? check_plain($layout->block_title) : NULL;
  $data['content'] = array(
    '#markup' => $renderer->render(),
    '#weight' => 0,
    '#contextual_links' => array(
      'mini_layouts' => array('admin/structure/mini-layouts/manage', array($name)),
    ),
  );

  return $data;
}


/**
 * Pass through to the layouts content editor.
 */
function mini_layouts_edit_content($name) {
  // Load from database to tempstore as Layout pulls from tempstore to build
  // the content form and blocks etc.
  if (!$layout = layout_tempstore_load($name)) {
    $layout = mini_layouts_load($name, TRUE);

    // Don't use layout_set_layout_tempstore(). It locks the layout.
    tempstore_set('layout.layout', $layout->name, $layout, 604800);
    $layout->locked = FALSE;
  }

  module_load_include('inc', 'layout', 'layout.admin');
  return backdrop_get_form('layout_content_form', $layout);
}

function mini_layouts_form_layout_content_form_alter(&$form, &$form_state, $form_id) {
  form_load_include($form_state, 'inc', 'layout', 'layout.admin');
  if ($form['#layout']->module == 'mini_layouts') {
    $form['actions']['submit']['#submit'] = array('mini_layouts_layout_content_form_submit');
    $form['actions']['cancel']['#submit'] = array('mini_layouts_layout_settings_form_reset');
  }
}

/**
 * Submit handler for layout_settings_form() that resets in-progress changes.
 */
function mini_layouts_layout_settings_form_reset($form, &$form_state) {
  /* @var Layout $layout */
  $layout = $form_state['layout'];
  layout_clear_layout_tempstore($layout->name);
  backdrop_set_message(t('Layout changes discarded.'));
  $form_state['redirect'] = 'admin/structure/mini-layouts';
}

function mini_layouts_layout_content_form_submit(&$form, &$form_state) {
  layout_content_form_submit($form, $form_state);
  layout_clear_layout_tempstore($form_state['layout']->name);
  cache()->delete('layout:mini_layouts:config');
  backdrop_static_reset('mini_layouts_block_info');
}

/**
 * Implements hook_layout_renderer_info().
 */
function mini_layouts_layout_renderer_info() {
  $info['mini_layouts_renderer'] = array(
    'class' => 'MiniLayoutsRenderer',
  );

  return $info;
}

/**
 * Implements hook_autoload_info().
 */
function mini_layouts_autoload_info() {
  return array(
    'MiniLayout' => 'layout.mini_layouts.class.inc',
    'MiniLayoutsRenderer' => 'mini_layouts_renderer.inc',
  );
}

/**
 * Implements hook_preprocess_layout().
 */
function mini_layouts_preprocess_layout(&$variables) {
  // This tricks layout_preprocess_layout() into hiding the page title and tabs.
  if ($variables['layout']->module == 'mini_layouts') {
    $variables['admin'] = TRUE;
  }
}


/**
 * Get any mini layout which path is set as the current path.
 *
 * This is mainly invoked to load context data on mini layout view..
 *
 * @return MiniLayout
 */
function mini_layout_get_layout_by_path() {
  $router_item = menu_get_item();

  // Use the static cache, but keyed on the normal path (such as node/1), rather
  // than the system path (such as node/%), since client modules might serve up
  // different layouts for the same system path.
  $href = $router_item['href'];
  $layouts_by_path = &backdrop_static(__FUNCTION__, array());
  if (isset($layouts_by_path[$href])) {
    return $layouts_by_path[$href];
  }

  $layouts = mini_layout_load_multiple_by_router_item($router_item);
  if (empty($layouts)) {
    return;
  }

  $selected_layout = NULL;
  foreach ($layouts as $layout) {
    // Contexts must have their data set before the layout's access may be
    // checked.
    $contexts = $layout->getContexts();
    foreach ($contexts as $context) {
      if (isset($context->position)) {
        if (!is_object($context->data)) {
          if (isset($router_item['map'][$context->position])) {
            $context_data = $router_item['map'][$context->position];
            // If the router item contains the context object in the right
            // position, then we can just set the data from that.
            if (is_object($context_data)) {
              $context->setData($context_data);
            }
            else {
              // If the context data was not an object, then we can try to set
              // it using the plugin's load callback. If there is no callback,
              // then it must be a string pass-through, so we leave it as is.
              $context_info = layout_get_context_info($context->plugin);
              if (isset($context_info['load callback'])) {
                $context_data = call_user_func_array($context_info['load callback'], array($router_item['original_map'][$context->position]));
              }
              $context->setData($context_data);
            }
          }
        }
      }
    }
    if (!$layout->disabled && $layout->checkAccess()) {
      $selected_layout = $layout;
      break;
    }
  }

  $layouts_by_path[$href] = $selected_layout;
  return $selected_layout;
}

/**
 * Load all layouts for a given router item and allow other modules to alter
 * them and/or set their contexts.
 *
 * @param array $router_item
 *   The fully built menu router item, e.g., what is returned by menu_get_item().
 *
 * @return MiniLayout[]
 *   An array of MiniLayout object instances.
 */
function mini_layout_load_multiple_by_router_item($router_item, $skip_menu_items = NULL) {
  $href = $router_item['href'];
  $layouts_by_item = &backdrop_static(__FUNCTION__, array());
  if (isset($layouts_by_item[$href])) {
    return $layouts_by_item[$href];
  }
  $layouts = mini_layout_load_multiple_by_path($router_item['path']);

  backdrop_alter('mini_layout_load_by_router_item', $layouts, $router_item);
  $layouts_by_item[$href] = $layouts;
  return $layouts;
}

/**
 * Load all mini layouts at a given path.
 *
 * @param string $path
 *   The menu routing path, with all placeholders represented by "%" symbols.
 *
 * @return MiniLayout[]
 *   An array of MiniLayout object instances.
 */
function mini_layout_load_multiple_by_path($path) {
  if ($cache = cache('mini_layout_path')->get($path)) {
    $layouts = $cache->data;

    // Populate these cached layouts into layout_load_multiple() to optimize
    // any future calls to it.
    $static_cache = &backdrop_static('mini_layout_load_multiple', array());
    $static_cache = array_merge($layouts, $static_cache);
  }
  else {
    $layout_names = mini_layout_get_path_layout_names($path);

    $layouts = mini_layout_load_multiple($layout_names);
    cache('mini_layout_path')->set($path, $layouts);
  }
  return $layouts;
}

/**
 * Get a list of mini layouts that share a particular path.
 */
function mini_layout_get_path_layout_names($path) {
  $path_map = &backdrop_static(__FUNCTION__, array());
  if (empty($path_map)) {
    $configs = layout_get_all_configs('mini_layouts');
    foreach ($configs as $layout_name => $config) {
      if (isset($config['path'])) {
        $path_map[$config['path']][] = $layout_name;
      }
    }
  }

  return isset($path_map[$path]) ? $path_map[$path] : array();
}

/**
 * Load multiple mini layouts based on a particular criteria.
 *
 * @param array $layout_names
 *   The names of the mini layouts to be loaded.
 *
 * @return MiniLayout[]
 *   An array of MiniLayout object instances.
 */
function mini_layout_load_multiple($layout_names) {
  $loaded_layouts = &backdrop_static(__FUNCTION__, array());

  $layouts_to_load = array();
  foreach ($layout_names as $layout_name) {
    if (!isset($loaded_layouts[$layout_name])) {
      $layouts_to_load[] = $layout_name;
    }
  }

  if ($layouts_to_load) {
    // Cache the raw config files once read.
    $configs = layout_get_all_configs('mini_layouts');

    // Create the mini layout instances and associate the menu items with each.
    foreach ($layouts_to_load as $layout_name) {
      if (isset($configs[$layout_name])) {
        $layout_data = $configs[$layout_name];
        $loaded_layouts[$layout_name] = new MiniLayout($layout_data);
      }
    }
  }

  // Return the requested mini layouts.
  $layouts = array();
  foreach ($layout_names as $layout_name) {
    if (isset($loaded_layouts[$layout_name])) {
      $layouts[$layout_name] = $loaded_layouts[$layout_name];
    }
    else {
      $layouts[$layout_name] = FALSE;
    }
  }

  return $layouts;
}

/**
 * Load a single mini layout.
 *
 * @return MiniLayout[]
 *   A MiniLayout object instance.
 */
function mini_layouts_load($layout_name, $set_tempstore = FALSE) {
  $layouts = mini_layout_load_multiple(array($layout_name));

  $return = $layouts[$layout_name];
  if ($set_tempstore && !empty($return)) {
    layout_set_layout_tempstore($return);
   $return->locked = FALSE;  }

  return $return;
}
