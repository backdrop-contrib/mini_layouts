<?php
/**
 * @file
 * Provides the ability to create mini layouts blocks.
 */

/**
 * Implements hook_permission().
 */
function mini_layouts_permission() {
  $permissions['administer blocks'] = array(
    'title' => t('Administer mini layouts blocks'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function mini_layouts_menu() {
  $items['admin/structure/mini-layouts'] = array(
    'title' => 'Mini layouts',
    'description' => 'Create reusable blocks that can be placed in layouts.',
    'page callback' => 'mini_layouts_admin_list',
    'access arguments' => array('administer blocks'),
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/list'] = array(
    'title' => 'List mini layouts',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/mini-layouts/manage/%'] = array(
    'title' => 'Configure layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_admin_configure', 4),
    'access arguments' => array('administer blocks'),
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/manage/%/configure'] = array(
    'title' => 'Configure mini layout',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
  );
  $items['admin/structure/mini-layouts/manage/%/delete'] = array(
    'title' => 'Delete mini layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_block_delete', 4),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/manage/%/configure-layout-blocks'] = array(
    'title' => 'Manage blocks',
    'page callback' => 'mini_layouts_edit_content',
    'page arguments' => array(4),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mini_layouts.admin.inc',
  );
  $items['admin/structure/mini-layouts/add'] = array(
    'title' => 'Add mini layouts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mini_layouts_add_block_form'),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mini_layouts.admin.inc',
  );
  return $items;
}

function mini_layouts_load($name) {
  // @todo: always return a MiniLayout object
  $configs = layout_get_all_configs('mini_layouts');
  return isset($configs[$name]) ? $configs[$name] : NULL;
}

/**
 * Implements hook_config_info().
 */
function mini_layouts_config_info() {
  $prefixes['layout.mini_layouts'] = array(
    'name_key' => 'name',
    'label_key' => 'info',
    'group' => t('Mini layouts blocks'),
  );
  return $prefixes;
}

/**
 * Implements hook_block_info().
 */
function mini_layouts_block_info() {
  global $language;

  // Statically cache to prevent multiple database lookups.
  $blocks = &backdrop_static(__FUNCTION__);
  if (isset($blocks)) {
    return $blocks;
  }

  $blocks = array();
  $config_names = layout_get_all_configs('mini_layouts');

  foreach ($config_names as $block) {
    // $block = config_get($config_name);
    $block_info = array();
    $block_info['info'] = $block['info'];
    $block_info['description'] = !empty($block['description']) ? $block['description'] : NULL;

    // If no description was entered, use a generic one.
    if (empty($block_info['description'])) {
      $block_info['description'] = t('A reusable mini layouts block.');
    }
    $blocks[$block['name']] = $block_info;
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generates the administrator-defined blocks for display.
 */
function mini_layouts_block_view($name = '') {
  $block = mini_layouts_load($name);
  if (!$block) {
    return array();
  }
  $layout = new MiniLayout($block);

  static $rendering = array();

  // Prevent loops if someone foolishly puts the block inside itself:
  if (!empty($rendering[$name])) {
    return array();
  }

  $rendering[$name] = TRUE;

  $renderer = layout_create_renderer('standard', $layout);

  $data['subject'] = strlen($block['title']) ? check_plain($block['title']) : NULL;
  $data['content'] = array(
    '#markup' => $renderer->render(),
    '#weight' => 0,
  );

  return $data;
}

/**
 * Form constructor for the mini layouts block form.
 *
 * @param $edit
 *   (optional) An associative array of information. Defaults to array().
 * @param $stand_alone
 *   (optional) Set to FALSE if this form is used when displaying as part of a
 *   form within the Layout UI. The default value of TRUE should be used if this
 *   is a stand-alone form, such as when editing a block at it's own URL.
 *
 * @ingroup forms
 */
function mini_layouts_block_form($edit = array(), $stand_alone = TRUE) {
  $edit += array(
    'name' => NULL,
    'info' => '',
    'title' => '',
    'description' => '',
    'body' => array('value' => '', 'format' => NULL),
    'layout_template' => 'boxton',
  );
  // If the description is the default from hook_block_info(), leave blank.
  if ($edit['description'] === t('A reusable mini layouts block.')) {
    $edit['description'] = '';
  }

  $form['info'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin label'),
    '#default_value' => $edit['info'],
    '#maxlength' => 64,
    '#description' => t('This text is used only in administrative interfaces. It will not be shown to site visitors.'),
    '#required' => TRUE,
    '#id' => 'block-info',
  );
  $form['name'] = array(
    '#type' => 'machine_name',
    '#default_value' => $edit['name'],
    '#maxlength' => 128,
    '#machine_name' => array(
      'exists' => 'mini_layouts_load',
      'source' => array('info'),
    ),
    '#description' => t('A unique machine-readable name for this Block. It must only contain lowercase letters, numbers, and underscores.'),
    '#disabled' => isset($edit['name']),
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin description'),
    '#default_value' => $edit['description'],
    '#maxlength' => 128,
    '#description' => t('This text is used only in administrative interfaces. It will not be shown to site visitors.<br />Allowed HTML tags: @tags', array('@tags' => _filter_xss_display_allowed_tags())),
    '#id' => 'block-description',
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Display title'),
    '#default_value' => $edit['title'],
    '#maxlength' => 255,
    '#description' => t('The title of the block as shown to the user. This will affect all places where this block is used.'),
  );
  // todo get rid of this of course.
  $form['body'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );

  $form['layout_template'] = array(
    '#title' => t('Layout template'),
    '#type' => 'radios',
    '#default_value' => $edit['layout_template'],
    '#options' => array(),
    '#wrapper_attributes' => array('class' => array('clearfix', 'layout-options')),
    '#required' => TRUE,
  );

  // Get the list of layout template options. The list needs to be rebuilt (see
  // https://github.com/backdrop/backdrop-issues/issues/984)
  $all_template_info = layout_get_layout_template_info(NULL, TRUE);

  $excluded = config_get('layout.settings', 'excluded_templates');
  foreach ($all_template_info as $template_name => $template_info) {
    if (!in_array($template_name, $excluded)) {
      $form['layout_template']['#options'][$template_name] = theme('layout_template_option', array('template_info' => $template_info));
    }
  }

  // When displaying as part of the Layout UI.
  if (!$stand_alone) {
    $form['title']['#states'] = array(
      'visible' => array(
        '[name=title_display]' => array('value' => LAYOUT_TITLE_DEFAULT),
      ),
    );

    $form['info']['#weight'] = 5;
    $form['name']['#weight'] = 6;
    $form['name']['#machine_name']['source'] = array('block_settings', 'info');
    $form['description']['#weight'] = 7;
  }

  return $form;
}

/**
 * Saves a user-created block in a config file.
 *
 * @param array $edit
 *   Associative array of fields to save. Array keys:
 *   - name: The machine name for the block
 *   - info: The administrative title for the block.
 *   - description: The administrative description for the block.
 *   - title: The block title (optional, since layouts have their own title field)
 *   - layout_template: The template used by this mini layout.
 * @param string|NULL $name
 *   Machine name of the block to save, comprised of lower-case letters,
 *   numbers, and underscores.
 */
function mini_layouts_block_layout_save(array $edit, $name = NULL) {
  $name = $name ? $name : preg_replace('/[^a-z0-9_]+/', '_', strtolower($edit['info']));
  $block = mini_layouts_load($name);

  if (!$block) {
    $block = array(
      'name' => $name,
      'info' => '',
      'title' => '',
      'description' => '',
      'layout_template' => 'boxton',
    );
  }

  foreach (array('info', 'description', 'title', 'body') as $key) {
    if (isset($edit[$key])) {
      $block[$key] = $edit[$key];
    }
  }

  $layout = new MiniLayout($block);
  $layout->setLayoutTemplate($edit['layout_template']);
  $layout->save();

  // Reset the static cache on the block list so this block is picked up.
  cache()->delete('layout:mini_layouts:config');
  layout_clear_layout_tempstore($block['name']);
  backdrop_static_reset('mini_layouts_block_info');
}

/**
 * Pass through to the layouts content editor.
 */
function mini_layouts_edit_content($name) {
  // Load from database to tempstore as Layout pulls from tempstore to build
  // the content form and blocks etc.
  if (!$layout = layout_tempstore_load($name)) {
    $config = mini_layouts_load($name);
    $layout = new MiniLayout($config);

    // Don't use layout_set_layout_tempstore(). It locks the layout.
    tempstore_set('layout.layout', $layout->name, $layout, 604800);
    $layout->locked = FALSE;
  }

  $layout->setPath('mini_layouts_block/' . $name);
  module_load_include('inc', 'layout', 'layout.admin');
  return backdrop_get_form('layout_content_form', $layout);
}

function mini_layouts_form_layout_content_form_alter(&$form, &$form_state, $form_id) {
  form_load_include($form_state, 'inc', 'layout', 'layout.admin');
  if ($form['#layout']->module == 'mini_layouts') {
    $form['actions']['submit']['#submit'] = array('mini_layouts_layout_content_form_submit');
    $form['actions']['cancel']['#submit'] = array('mini_layouts_layout_settings_form_reset');
  }
}

/**
 * Submit handler for layout_settings_form() that resets in-progress changes.
 */
function mini_layouts_layout_settings_form_reset($form, &$form_state) {
  /* @var Layout $layout */
  $layout = $form_state['layout'];
  layout_clear_layout_tempstore($layout->name);
  backdrop_set_message(t('Layout changes discarded.'));
  $form_state['redirect'] = 'admin/structure/mini-layouts';
}

function mini_layouts_layout_content_form_submit(&$form, &$form_state) {
  layout_content_form_submit($form, $form_state);
  layout_clear_layout_tempstore($form_state['layout']->name);
  cache()->delete('layout:mini_layouts:config');
  backdrop_static_reset('mini_layouts_block_info');
}

/**
 * Implements hook_autoload_info().
 */
function mini_layouts_autoload_info() {
  return array(
    'MiniLayout' => 'layout.mini_layouts.class.inc',
  );
}

function mini_layouts_preprocess_layout(&$variables) {
  // This tricks layout_preprocess_layout() into hiding the page title and tabs.
  if ($variables['layout']->module == 'mini_layouts') {
    $variables['admin'] = TRUE;
  }
}

